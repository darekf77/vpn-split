//#region imports
import * as _ from 'lodash';
import * as path from 'path';
import { Helpers, Project } from 'tnp-helpers';
import { URL } from 'url';
import { config } from 'tnp-config';
import * as moment from 'moment';
import { talkback, Options, RecordMode } from 'ng-talkback';
import * as glob from 'glob';
import * as inquirer from 'inquirer';
import { Models } from 'tnp-models';
import { Hostile } from './hostile.backend';
import { EtcHosts, HostForServer } from './models.backend';
declare const global: any;
const isElevated = require('is-elevated');
//#endregion

const GENERATED = '#GENERATED_BY_NAVI_CLI#';

var WINDOWS = process.platform === 'win32'
var EOL = WINDOWS
  ? '\r\n'
  : '\n'

const HOST_FILE_PATH = WINDOWS
  ? 'C:/Windows/System32/drivers/etc/hosts'
  : '/etc/hosts'

const from = HostForServer.From;
const defaultHosts = {
  'localhost alias': from({
    ipOrDomain: '127.0.0.1',
    aliases: 'localhost'
  }),
  'broadcasthost': from({
    ipOrDomain: '255.255.255.255',
    aliases: 'broadcasthost'
  }),
  'localhost alias ipv6': from({
    ipOrDomain: '::1',
    aliases: 'localhost'
  }),
} as EtcHosts;

const TEMP_HOSTS = 'tmp-hosts.txt';

export class VpnSplit {

  readonly hostile: Hostile;

  //#region singleton
  private static _instances = {};
  private constructor(
    private hosts: EtcHosts,
    private cwd: string
  ) {
    this.hostile = new Hostile();
  }
  public static async Instance(additionalDefaultHosts?: EtcHosts, cwd = process.cwd()) {

    if (!(await isElevated())) {
      Helpers.error(`[vpn-split] Please run this program as sudo (or admin on windows)`, false, true)
    }

    if (!VpnSplit._instances[cwd]) {
      VpnSplit._instances[cwd] = new VpnSplit(_.merge(defaultHosts, additionalDefaultHosts), cwd);
    }
    return VpnSplit._instances[cwd] as VpnSplit;
  }
  //#endregion

  saveHosts() {
    Helpers.writeFile(HOST_FILE_PATH, parseHost(this.hosts));
  }

  async server() {
    this.hostile.list();
    this.saveHosts();
  }

  async client() {

  }

}

const genMsg = `
################################################
## This file is generated by coomand navi vpn ##
################################################
`.trim() + EOL;


function parseHost(hosts: EtcHosts) {
  _.keys(hosts).forEach(hostName => {
    const v = hosts[hostName] as HostForServer;
    v.name = hostName;
  });
  return genMsg + EOL + _.keys(hosts).map(hostName => {
    const v = hosts[hostName] as HostForServer;
    return `${v.disabled ? '#' : ''}${v.ipOrDomain} ${(v.aliases as string[]).join(' ')}`
      + ` # ${v.name} ${GENERATED}`;
  }).join(EOL) + EOL + EOL + genMsg;

}
